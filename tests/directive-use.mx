; wrong directive uses

%define defined1 1
%define defined2 2
%define defined3 3

%macro test_mac() { ld insides }
%macro test_mac2() { ld more insides }

; normal use
%defined1
mov %defined2
mov defined3
%undefd

; multiple imms
ld 8 %defined3
ld %defined1 9
ld %defined_ 10
ld 11 %defined_
ld %define

; uses in contexts
%defined1()
%defined1%defined2
%defined3 %defined1
(%defined3)

:lab1%defined1
:lab2(%defined2)

:label1 %defined1
:label2 mov %defined3
:label3 %test_mac()

mov %test_mac()
%test_mac() %test_mac2()
str %test_mac2() %test_mac()
ld %defined1 %test_mac()

; expansion arglist
%macro print(num) { outu %num }
%macro jnn(a, b,c) {}

%print
%print()
%print(5)
%print(5, 6)

%jnn(5, 6)
%jnn(7, 8, 9)
%jnn(0, 1,2,3)
%print(_)

%jnn(!,% define b 33, unreachable)
%jnn(!, %define b 33, unreachable)
%jnn(!,
	%define b 33, unreachable)
%jnn(!, nonex,
	%macro inside() {})
%jnn(
	%defined3,
	%defined1,
	%print(5)
)

%macro defLabel(name) {
	: %name
}
%defLabel(:labelInside1)
%print(labelInside1)
%defLabel(labelInside2)
%print(labelInside2)

%jnn(4, %defined1,%defined2)
%jnn(4, %defined2, %defined_)
%jnn(%defined3, %test_mac(), 2)

; macro arguments use
%macro argUse(a, b, c) {
	outu %a
	outum %b()
	outu %c ()
}
%argUse(1, 2, 3)

%macro scope1(var, upper) {
	outu _ %var
	outu _ %upper
	%lower
}
%macro scope2(var, lower) {
	outu _ %var
	outu _ %lower
	%upper

	%scope1(9, 68)
}
%macro testScopingAndArglistExpansions(a, b, c, d) {
	%scope2(%a, %b)
	%lower
	%scope1(%c, %d)
	%upper
}
%define testDef 485
%testScopingAndArglistExpansions(5, 18, %testDef, 128)
