; tests redefinitions against each other - labels, defines, macros, macro args; instructions, builtins

; define, macro, macro arg, namespace
%define prep1 5

%macro prep1() {}
%macro prep2() {}
%macro prep2() {}

%macro arg1(prep1) {}
%macro arg2(prep2) {}
%macro arg3(prep3) {}

%macro arg4(prep3, arg3) {}
%macro prep3(prep2)
%macro prep4(prep1)

%macro arg5(hutu, tutu, hutu, tutu)
%macro PREP3() {}

%namespace prep1 {}
%namespace prep4b {}

%define prep1 11
%define arg5 55
%define prep3 33
%define Arg1 111
%define prep4 89

; label vs. preprocessed
:lvp1
:lvp2
%define lvp1 11
%macro lvp2() {}
%namespace lvp2 {}

%define lvp3 33
%macro lvp4() { 44 }
%namespace lvn {}
:lvp3
:lvp4
:lvn

:lvp5
%macro mac1(lvp5) {}
%macro mac2(labvar) {
	:labvar
}
%mac2(15)

; against builtins, default names
:begin
:END
:define
:macro
:namespace
:using
:__main

%macro arg_redef(end, begin, macro) {}
%macro arg_redef2(using) {}

%define end 5
%define macro 6
%define Macro 83
%define namespace 1
%define using 55

%macro begin() {}
%macro define() {}
%macro macro()
%macro MACRO() {5454}
%macro using()
%macro uSing() {}
%macro __main() {}

%namespace define
%namespace namespace {}
%namespace __main {}
%namespace main {
	%namespace __main {}
}
%namespace using

; against instructions
:outu
:str
:s
:seq
:swap
:swAp
:in
:inc

%define mov 5
%define lgt 6
%define lnee 5
%define str| 8

%macro inu() {}
%macro bmletr() {}
bmletr

%macro AGI1(outcp) ; these macros will soon take over the world, even though they have no body
%macro AGI2(swap_, ldam)

%namespace inc{}
%namespace out{}

; inside different namespace
%namespace upper {
	%define def 8
	%define def2 11
	%macro mac() {}
	:namespace_lab

	%namespace inner {
		%define def 9
		%macro mac() {}
		:namespace_lab

		commit %def %def2
	}
	%define mac 9
	%macro def() {}
	
	outu %def %def2 %inner:def %inner:def2
}

; defining shadowing name + resolution order test
%define a 7
%macro m() { A }
%namespace N {
	%define v1 0
}
%namespace M {
	%define v2 4
}
%namespace names {
	%define a 8
	%macro m() { B }
	%namespace N {
		%define v1 1
	}
	%namespace M {
		%define v2 5
	}
}
%namespace before_after_using {
	%define a 9
	%namespace N {
		%define v1 2
	}

	%using names
	
	%define a 10
	%macro m() { C }
	%namespace N {
		%define v1 3
	}
}
%a
%m()
%before_after_using:a
%before_after_using:m()
%before_after_using:N:v1
%before_after_using:M:v2
%using before_after_using
%a
%N:v1
