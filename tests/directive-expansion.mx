
%macro outNl() { outc 10 }
%macro printU(num) {
	outu %num
	%outNl()
}
%printU(0)
%printU( 25 )
%outNl()

%macro moreArg(a, b, c) {
	%printU(%a)
	%printU(15)
	%printU(%c)
	%printU(%b)
	%outNl()
}
%moreArg( 7, 8,	9 )

%define dummyDef 124
%macro dummyMac(arg) {
	%printU(%arg)
}
%macro testArgPreprocess(a) {
	outup
	%outNl()
	:dummyLab

	%dummyMac(%a)
	%dummyMac(%dummyDef)
	%dummyMac(dummyLab)
	%dummyMac(afterLab)
	%outNl()
}

%testArgPreprocess(48)
:afterLab

; substitution in complex names
%macro testInstr(instr, reg) {
	%instr 21845
	outu( %reg )
	outc 10
}
%testInstr(s(tr), m)
%testInstr(str(&), m)
%testInstr(s(tr)(a), m)
