
%macro outNl() { outc 10 }
%macro printU(num) {
	outu %num
	%outNl()
}
%printU(0)
%printU( 25 )
%outNl()

%macro moreArg(a, b, c) {
	%printU(%a)
	%printU(15)
	%printU(%c)
	%printU(%b)
	%outNl()
}
%moreArg( 7, 8,	9 )

%define dummyDef 124
%macro dummyMac(arg) {
	%printU(%arg)
}
%macro testArgPreprocess(a) {
	outup
	%outNl()
	:dummyLab

	%dummyMac(%a)
	%dummyMac(%dummyDef)
	%dummyMac(dummyLab)
	%dummyMac(afterLab)
	%outNl()
}

%testArgPreprocess(48)
:afterLab

; substitution in complex names
%macro testInstr(instr, reg) {
	%instr 21845
	outu( %reg )
	outc 10
}
%testInstr(s(tr), m)
%testInstr(str(&), m)
%testInstr(s(tr)(a), m)

; macro scoping
%macro print(num) { ; output 012, A55, B15
	outu %num
}
outc 10
%print(0)

%namespace Foo {
	%define value 15
	%define CapA 65
	%define newline 10

	%namespace Printer {
		%macro printLn(num) {
			%print(%num)
			outc %newline
		}
	}
	%namespace Mem {
		%define char 4

		mov %char
		str %CapA
		%print(1)

		%macro increment() {
			mov %char
			stra 1
		}
		%macro printChar() {
			mov %char
			outcm
			%increment()
		}
	}

	%macro mac(x) {
		%Mem:printChar()
		%Printer:printLn(%x)
	}
}
%define localConst 55
%Foo:Printer:printLn(2)

%Foo:mac(%localConst)
%Foo:mac(%Foo:value)
